import abc
import lvsfunc
import vapoursynth as vs
from .util import FormatError as FormatError, get_sample_type as get_sample_type, mae_expr as mae_expr, max_expr as max_expr, pick_px_op as pick_px_op
from abc import ABC
from typing import Any, Dict, List, Optional, Union

core: Any

class EdgeDetect(ABC, metaclass=abc.ABCMeta):
    def get_mask(self, clip: vs.VideoNode, lthr: float=..., hthr: Optional[float]=..., multi: float=...) -> vs.VideoNode: ...

class Laplacian1(EdgeDetect): ...
class Laplacian2(EdgeDetect): ...
class Laplacian3(EdgeDetect): ...
class Laplacian4(EdgeDetect): ...
class ExLaplacian1(EdgeDetect): ...
class ExLaplacian2(EdgeDetect): ...
class ExLaplacian3(EdgeDetect): ...
class ExLaplacian4(EdgeDetect): ...
class Kayyali(EdgeDetect): ...
class LoG(EdgeDetect): ...
class Roberts(EdgeDetect): ...
class Prewitt(EdgeDetect): ...
class PrewittStd(EdgeDetect): ...
class ExPrewitt(EdgeDetect): ...
class Sobel(EdgeDetect): ...
class SobelStd(EdgeDetect): ...
class ExSobel(EdgeDetect): ...
class Scharr(EdgeDetect): ...
class FDOG(EdgeDetect): ...
class Kroon(EdgeDetect): ...
class FreyChen(EdgeDetect): ...
class FreyChenG41(EdgeDetect): ...
class TEdge(EdgeDetect): ...
class TEdgeTedgemask(EdgeDetect): ...
class Robinson3(EdgeDetect): ...
class Robinson5(EdgeDetect): ...
class Kirsch(EdgeDetect): ...
class ExKirsch(EdgeDetect): ...

def get_all_edge_detects(clip: vs.VideoNode, **kwargs: Any) -> List[vs.VideoNode]: ...

class Difference:
    def rescale(self, clip: vs.VideoNode, height: int=..., kernel: lvsfunc.kernels.Kernel=..., thr: Union[int, float]=..., expand: int=...) -> vs.VideoNode: ...
    def creditless(self, src_clip: vs.VideoNode, credit_clip: vs.VideoNode, nc_clip: vs.VideoNode, start_frame: int, thr: int, expand: int=..., *, prefilter: bool=..., bilateral_args: Dict[str, Any]=...) -> vs.VideoNode: ...
    def creditless_oped(self, ep: vs.VideoNode, ncop: vs.VideoNode, nced: vs.VideoNode, opstart: Optional[int]=..., opend: Optional[int]=..., edstart: Optional[int]=..., edend: Optional[int]=..., **creditless_args: Any) -> vs.VideoNode: ...

def diff_creditless_mask(src_clip: vs.VideoNode, credit_clip: vs.VideoNode, nc_clip: vs.VideoNode, start_frame: int, thr: int, expand: int=..., *, prefilter: bool=..., bilateral_args: Dict[str, Any]=...) -> vs.VideoNode: ...
def diff_rescale_mask(clip: vs.VideoNode, height: int=..., kernel: lvsfunc.kernels.Kernel=..., thr: Union[int, float]=..., expand: int=...) -> vs.VideoNode: ...
def luma_mask(clip: vs.VideoNode, thr_lo: float, thr_hi: float, invert: bool=...) -> vs.VideoNode: ...
def luma_credit_mask(clip: vs.VideoNode, thr: int=..., edgemask: EdgeDetect=..., draft: bool=...) -> vs.VideoNode: ...
def region_mask(clip: vs.VideoNode, left: int=..., right: int=..., top: int=..., bottom: int=...) -> vs.VideoNode: ...
